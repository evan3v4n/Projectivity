# Projectivity GraphQL Schema

type Project {
  id: ID!
  title: String!
  description: String!
  category: String!
  status: ProjectStatus!
  technologies: [String!]!
  owner: User!
  openPositions: Int!
  timeCommitment: String!
  popularity: Int!
  team: Team
  teamMembers: [TeamMember!]!
  timeline: String
  learningObjectives: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  username: String!
  email: String!
  firstName: String!
  lastName: String!
  bio: String
  profileImageUrl: String
  skills: [String!]!
  educationLevel: String
  yearsExperience: Int!
  preferredRole: String
  githubUrl: String
  linkedInUrl: String
  portfolioUrl: String
  emailVerified: Boolean!
  lastActive: DateTime!
  timeZone: String
  availableHours: String
  certifications: [String!]
  languages: [String!]
  projectPreferences: [String!]
  projects: [Project!]!
  ownedProjects: [Project!]!
  joinedAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Team {
  id: ID!
  name: String!
  description: String
  project: Project!
  members: [TeamMember!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamMember {
  id: ID!
  user: User!
  team: Team!
  role: String!
  joinedAt: DateTime!
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

scalar DateTime

type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: DateTime
  assignee: User
  project: Project!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

type Query {
  project(id: ID!): Project
  projects(
    category: String
    status: ProjectStatus
    technology: String
    limit: Int
    offset: Int
  ): [Project!]!
  
  user(id: ID!): User
  users(limit: Int, offset: Int): [User!]!
  
  searchProjects(query: String!): [Project!]!
  
  task(id: ID!): Task
  tasks(projectId: ID!, status: TaskStatus, limit: Int, offset: Int): [Task!]!
  userTasks(userId: ID!, status: TaskStatus, limit: Int, offset: Int): [Task!]!
  
  team(id: ID!): Team
  teamsByProject(projectId: ID!): [Team!]!

  joinRequests(projectId: ID!): [JoinRequest!]!
}

type Mutation {
  # Existing mutations
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): Boolean!
  
  joinTeam(teamId: ID!, role: String!): TeamMember!
  leaveTeam(teamId: ID!): Boolean!
  
  updateUser(id: ID!, input: UpdateUserInput!): User!
  
  addTechnology(projectId: ID!, technology: String!): Project!
  removeTechnology(projectId: ID!, technology: String!): Project!

  # New mutation for user creation
  createUser(input: CreateUserInput!): User!

  changePassword(id: ID!, oldPassword: String!, newPassword: String!): User!

  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
  assignTask(taskId: ID!, userId: ID!): Task!
  unassignTask(taskId: ID!): Task!
  updateTaskStatus(taskId: ID!, status: TaskStatus!): Task!
  
  createTeam(input: CreateTeamInput!): Team!
  updateTeam(id: ID!, input: UpdateTeamInput!): Team!
  deleteTeam(id: ID!): Boolean!
  
  loginUser(email: String!, password: String!): AuthPayload!
  logoutUser: Boolean!

  joinProject(projectId: ID!): Project!
  requestToJoinProject(projectId: ID!): JoinRequest!
}

type JoinRequest {
  id: ID!
  user: User!
  project: Project!
  status: JoinRequestStatus!
  createdAt: DateTime!
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

input CreateProjectInput {
  title: String!
  description: String!
  category: String!
  technologies: [String!]!
  openPositions: Int!
  timeCommitment: String!
  learningObjectives: [String!]!
  status: ProjectStatus = PLANNING
  timeline: String
  popularity: Int = 0
}

input UpdateProjectInput {
  title: String
  description: String
  category: String
  status: ProjectStatus
  openPositions: Int
  timeCommitment: String
  learningObjectives: [String!]
  technologies: [String!]
  timeline: String 
  popularity: Int
}

input UpdateUserInput {
  username: String
  email: String
  firstName: String
  lastName: String
  bio: String
  profileImageUrl: String
  skills: [String!]
  educationLevel: String
  yearsExperience: Int
  preferredRole: String
  githubUrl: String
  linkedInUrl: String
  portfolioUrl: String
  timeZone: String
  availableHours: String
  certifications: [String!]
  languages: [String!]
  projectPreferences: [String!]
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  skills: [String!]!
  bio: String
  educationLevel: String
  yearsExperience: Int!
  preferredRole: String
  githubUrl: String
  linkedInUrl: String
  portfolioUrl: String
  timeZone: String
  availableHours: String
  certifications: [String!]
  languages: [String!]
  projectPreferences: [String!]
}

input ProjectFilterInput {
  category: String
  status: ProjectStatus
  technology: String
  minOpenPositions: Int
  maxOpenPositions: Int
  timeCommitment: String
}

input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus = TODO
  priority: TaskPriority!
  dueDate: DateTime
  projectId: ID!
  assigneeId: ID
}

input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  priority: TaskPriority
  dueDate: DateTime
  assigneeId: ID
}

input CreateTeamInput {
  name: String!
  description: String
  projectId: ID!
}

input UpdateTeamInput {
  name: String
  description: String
}

type AuthPayload {
  token: String!
  user: User!
}

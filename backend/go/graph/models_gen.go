// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
)

type CreateProjectInput struct {
	Title              string   `json:"title"`
	Description        string   `json:"description"`
	Category           string   `json:"category"`
	Technologies       []string `json:"technologies"`
	OpenPositions      int      `json:"openPositions"`
	TimeCommitment     string   `json:"timeCommitment"`
	LearningObjectives []string `json:"learningObjectives"`
}

type Mutation struct {
}

type Project struct {
	ID                 string        `json:"id"`
	Title              string        `json:"title"`
	Description        string        `json:"description"`
	Category           string        `json:"category"`
	Status             ProjectStatus `json:"status"`
	Technologies       []string      `json:"technologies"`
	Owner              *User         `json:"owner"`
	OpenPositions      int           `json:"openPositions"`
	TimeCommitment     string        `json:"timeCommitment"`
	Popularity         int           `json:"popularity"`
	TeamMembers        []*TeamMember `json:"teamMembers"`
	Timeline           string        `json:"timeline"`
	LearningObjectives []string      `json:"learningObjectives"`
	CreatedAt          string        `json:"createdAt"`
	UpdatedAt          string        `json:"updatedAt"`
}

type Query struct {
}

type TeamMember struct {
	ID       string   `json:"id"`
	User     *User    `json:"user"`
	Project  *Project `json:"project"`
	Role     string   `json:"role"`
	JoinedAt string   `json:"joinedAt"`
}

type UpdateProjectInput struct {
	Title              *string        `json:"title,omitempty"`
	Description        *string        `json:"description,omitempty"`
	Category           *string        `json:"category,omitempty"`
	Status             *ProjectStatus `json:"status,omitempty"`
	OpenPositions      *int           `json:"openPositions,omitempty"`
	TimeCommitment     *string        `json:"timeCommitment,omitempty"`
	LearningObjectives []string       `json:"learningObjectives,omitempty"`
}

type UpdateUserInput struct {
	Username *string  `json:"username,omitempty"`
	Email    *string  `json:"email,omitempty"`
	Bio      *string  `json:"bio,omitempty"`
	Skills   []string `json:"skills,omitempty"`
}

type User struct {
	ID            string     `json:"id"`
	Username      string     `json:"username"`
	Email         string     `json:"email"`
	Projects      []*Project `json:"projects"`
	OwnedProjects []*Project `json:"ownedProjects"`
	Skills        []string   `json:"skills"`
	Bio           *string    `json:"bio,omitempty"`
	JoinedAt      string     `json:"joinedAt"`
}

type ProjectStatus string

const (
	ProjectStatusPlanning   ProjectStatus = "PLANNING"
	ProjectStatusInProgress ProjectStatus = "IN_PROGRESS"
	ProjectStatusCompleted  ProjectStatus = "COMPLETED"
	ProjectStatusOnHold     ProjectStatus = "ON_HOLD"
)

var AllProjectStatus = []ProjectStatus{
	ProjectStatusPlanning,
	ProjectStatusInProgress,
	ProjectStatusCompleted,
	ProjectStatusOnHold,
}

func (e ProjectStatus) IsValid() bool {
	switch e {
	case ProjectStatusPlanning, ProjectStatusInProgress, ProjectStatusCompleted, ProjectStatusOnHold:
		return true
	}
	return false
}

func (e ProjectStatus) String() string {
	return string(e)
}

func (e *ProjectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectStatus", str)
	}
	return nil
}

func (e ProjectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

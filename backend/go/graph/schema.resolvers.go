package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/evan3v4n/Projectivity/backend/go/graph/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// JoinTeam is the resolver for the joinTeam field.
func (r *mutationResolver) JoinTeam(ctx context.Context, teamID string, role string) (*model.TeamMember, error) {
	panic(fmt.Errorf("not implemented: JoinTeam - joinTeam"))
}

// LeaveTeam is the resolver for the leaveTeam field.
func (r *mutationResolver) LeaveTeam(ctx context.Context, teamID string) (bool, error) {
	panic(fmt.Errorf("not implemented: LeaveTeam - leaveTeam"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// AddTechnology is the resolver for the addTechnology field.
func (r *mutationResolver) AddTechnology(ctx context.Context, projectID string, technology string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: AddTechnology - addTechnology"))
}

// RemoveTechnology is the resolver for the removeTechnology field.
func (r *mutationResolver) RemoveTechnology(ctx context.Context, projectID string, technology string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: RemoveTechnology - removeTechnology"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, id string, oldPassword string, newPassword string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: CreateTask - createTask"))
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, input model.UpdateTaskInput) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTask - updateTask"))
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTask - deleteTask"))
}

// AssignTask is the resolver for the assignTask field.
func (r *mutationResolver) AssignTask(ctx context.Context, taskID string, userID string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: AssignTask - assignTask"))
}

// UnassignTask is the resolver for the unassignTask field.
func (r *mutationResolver) UnassignTask(ctx context.Context, taskID string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UnassignTask - unassignTask"))
}

// UpdateTaskStatus is the resolver for the updateTaskStatus field.
func (r *mutationResolver) UpdateTaskStatus(ctx context.Context, taskID string, status model.TaskStatus) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: UpdateTaskStatus - updateTaskStatus"))
}

// CreateTeam is the resolver for the createTeam field.
func (r *mutationResolver) CreateTeam(ctx context.Context, input model.CreateTeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: CreateTeam - createTeam"))
}

// UpdateTeam is the resolver for the updateTeam field.
func (r *mutationResolver) UpdateTeam(ctx context.Context, id string, input model.UpdateTeamInput) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: UpdateTeam - updateTeam"))
}

// DeleteTeam is the resolver for the deleteTeam field.
func (r *mutationResolver) DeleteTeam(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeam - deleteTeam"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, category *string, status *model.ProjectStatus, technology *string, limit *int, offset *int) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// SearchProjects is the resolver for the searchProjects field.
func (r *queryResolver) SearchProjects(ctx context.Context, query string) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: SearchProjects - searchProjects"))
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, projectID string, status *model.TaskStatus, limit *int, offset *int) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// UserTasks is the resolver for the userTasks field.
func (r *queryResolver) UserTasks(ctx context.Context, userID string, status *model.TaskStatus, limit *int, offset *int) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: UserTasks - userTasks"))
}

// Team is the resolver for the team field.
func (r *queryResolver) Team(ctx context.Context, id string) (*model.Team, error) {
	panic(fmt.Errorf("not implemented: Team - team"))
}

// TeamsByProject is the resolver for the teamsByProject field.
func (r *queryResolver) TeamsByProject(ctx context.Context, projectID string) ([]*model.Team, error) {
	panic(fmt.Errorf("not implemented: TeamsByProject - teamsByProject"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) JoinProject(ctx context.Context, projectID string, role string) (*model.TeamMember, error) {
	panic(fmt.Errorf("not implemented: JoinProject - joinProject"))
}
func (r *mutationResolver) LeaveProject(ctx context.Context, projectID string) (bool, error) {
	panic(fmt.Errorf("not implemented: LeaveProject - leaveProject"))
}
*/

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/evan3v4n/Projectivity/backend/go/graph/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// JoinProject is the resolver for the joinProject field.
func (r *mutationResolver) JoinProject(ctx context.Context, projectID string, role string) (*model.TeamMember, error) {
	panic(fmt.Errorf("not implemented: JoinProject - joinProject"))
}

// LeaveProject is the resolver for the leaveProject field.
func (r *mutationResolver) LeaveProject(ctx context.Context, projectID string) (bool, error) {
	panic(fmt.Errorf("not implemented: LeaveProject - leaveProject"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// AddTechnology is the resolver for the addTechnology field.
func (r *mutationResolver) AddTechnology(ctx context.Context, projectID string, technology string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: AddTechnology - addTechnology"))
}

// RemoveTechnology is the resolver for the removeTechnology field.
func (r *mutationResolver) RemoveTechnology(ctx context.Context, projectID string, technology string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: RemoveTechnology - removeTechnology"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context, category *string, status *model.ProjectStatus, technology *string, limit *int, offset *int) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit *int, offset *int) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// SearchProjects is the resolver for the searchProjects field.
func (r *queryResolver) SearchProjects(ctx context.Context, query string) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: SearchProjects - searchProjects"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
